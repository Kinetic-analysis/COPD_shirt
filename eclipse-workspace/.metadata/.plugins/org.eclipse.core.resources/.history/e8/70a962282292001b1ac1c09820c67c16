/* esp_timer (high resolution timer) example

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/

#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include "esp_timer.h"
#include "esp_log.h"
#include "esp_sleep.h"
#include "sdkconfig.h"
#include <inttypes.h>
#include "driver/gpio.h"
#include "driver/adc.h"
#include "esp_adc_cal.h"

#define DEFAULT_VREF    1100        //Use adc2_vref_to_gpio() to obtain a better estimate
#define NO_OF_SAMPLES   16          //Multisampling

static esp_adc_cal_characteristics_t *adc_chars;
static const adc_channel_t channel6 = ADC_CHANNEL_6;     //GPIO34 if ADC1
static const adc_channel_t channel7 = ADC_CHANNEL_7;     //GPIO35 if ADC1
static const adc_bits_width_t width = ADC_WIDTH_BIT_12;
static const adc_atten_t atten = ADC_ATTEN_DB_0;
static const adc_unit_t unit = ADC_UNIT_1;

static void periodic_timer_callback(void* arg);
static void oneshot_timer_callback(void* arg);

static const char* TAG = "example";

static void check_efuse(void)
{
    //Check if TP is burned into eFuse
    if (esp_adc_cal_check_efuse(ESP_ADC_CAL_VAL_EFUSE_TP) == ESP_OK) {
        printf("eFuse Two Point: Supported\n");
    } else {
        printf("eFuse Two Point: NOT supported\n");
    }
    //Check Vref is burned into eFuse
    if (esp_adc_cal_check_efuse(ESP_ADC_CAL_VAL_EFUSE_VREF) == ESP_OK) {
        printf("eFuse Vref: Supported\n");
    } else {
        printf("eFuse Vref: NOT supported\n");
    }
}


static void print_char_val_type(esp_adc_cal_value_t val_type)
{
    if (val_type == ESP_ADC_CAL_VAL_EFUSE_TP) {
        printf("Characterized using Two Point Value\n");
    } else if (val_type == ESP_ADC_CAL_VAL_EFUSE_VREF) {
        printf("Characterized using eFuse Vref\n");
    } else {
        printf("Characterized using Default Vref\n");
    }
}

void app_main(void)
{
    /* Create two timers:
     * 1. a periodic timer which will run every 0.5s, and print a message
     * 2. a one-shot timer which will fire after 5s, and re-start periodic
     *    timer with period of 1s.
     */

    const esp_timer_create_args_t periodic_timer_args = {
            .callback = &periodic_timer_callback,
            /* name is optional, but may help identify the timer when debugging */
            .name = "periodic"
    };

    esp_timer_handle_t periodic_timer;
    ESP_ERROR_CHECK(esp_timer_create(&periodic_timer_args, &periodic_timer));
    /* The timer has been created but is not running yet */

    const esp_timer_create_args_t oneshot_timer_args = {
            .callback = &oneshot_timer_callback,
            /* argument specified here will be passed to timer callback function */
            .arg = (void*) periodic_timer,
            .name = "one-shot"
    };
    esp_timer_handle_t oneshot_timer;
    ESP_ERROR_CHECK(esp_timer_create(&oneshot_timer_args, &oneshot_timer));

    /* Start the timers */
    ESP_ERROR_CHECK(esp_timer_start_periodic(periodic_timer, 500000));
    ESP_ERROR_CHECK(esp_timer_start_once(oneshot_timer, 5000000));
    ESP_LOGI(TAG, "Started timers, time since boot: %lld us", esp_timer_get_time());

    /* Print debugging information about timers to console every 2 seconds */
    for (int i = 0; i < 5; ++i) {
        ESP_ERROR_CHECK(esp_timer_dump(stdout));
        usleep(2000000);
    }

    /* Timekeeping continues in light sleep, and timers are scheduled
     * correctly after light sleep.
     */
    ESP_LOGI(TAG, "Entering light sleep for 0.5s, time since boot: %lld us",
            esp_timer_get_time());

    ESP_ERROR_CHECK(esp_sleep_enable_timer_wakeup(500000));
    esp_light_sleep_start();

    ESP_LOGI(TAG, "Woke up from light sleep, time since boot: %lld us",
                esp_timer_get_time());

    /* Let the timer run for a little bit more */
    usleep(20000000);

	uint32_t adc_reading = 0;
	uint64_t vStretch = 0;
	uint64_t resistance = 0;
	uint64_t current = 0;
	uint64_t voltage = 0;
	uint64_t a = 0;
	uint64_t b = 0;
	uint64_t c = 0;
	uint64_t timingMicros1 = 0;
	uint64_t timingMicros2 = 0;
	uint32_t vBatt = 0;
	uint64_t capacity = 0;
    //Check if Two Point or Vref are burned into eFuse
    //check_efuse();
    gpio_pad_select_gpio(GPIO_NUM_27); //Red_LED
    gpio_set_direction(GPIO_NUM_27, GPIO_MODE_OUTPUT);	//Red_LED
    gpio_set_level(GPIO_NUM_27, 0);	//Red_LED
    //Configure ADC
    adc1_config_width(width);
    adc1_config_channel_atten(channel6, atten);
    adc1_config_channel_atten(channel7, atten);
    printf("TEST1\n");
    //Characterize ADC
    adc_chars = calloc(1, sizeof(esp_adc_cal_characteristics_t));
    printf("TEST2\n");
    esp_adc_cal_value_t val_type = esp_adc_cal_characterize(unit, atten, width, DEFAULT_VREF, adc_chars);
    //print_char_val_type(val_type);
    printf("TEST3\n");

    while(1)
    {
    	printf("TEST4\n");
    	timingMicros1 = esp_timer_get_time();
    	printf("TEST5\n");
    	gpio_set_level(GPIO_NUM_27, 1);	//Red_LED
    	printf("TEST6\n");
    	a = 1;
    	while(a == 1)
    	{
    		//adc_reading = adc1_get_raw((adc1_channel_t)channel7);
    		//if(esp_adc_cal_raw_to_voltage(adc_reading, adc_chars) >= 2085)
    		//{
    			timingMicros2 = esp_timer_get_time();
    			//b = timingMicros2-timingMicros1;
    			//c = b*1000;
    			//capacity = c/1050000;
    			//printf("Capacity = ");
    			//printf("%" PRIu64 "\n", capacity);
    			gpio_set_level(GPIO_NUM_27, 0);	//Red_LED
    			a = 0;
    		//}
    	}
    	usleep(1000000);
    }
    /* Clean up and finish the example */
//    ESP_ERROR_CHECK(esp_timer_stop(periodic_timer));
//    ESP_ERROR_CHECK(esp_timer_delete(periodic_timer));
//    ESP_ERROR_CHECK(esp_timer_delete(oneshot_timer));
//    ESP_LOGI(TAG, "Stopped and deleted timers");
}

static void periodic_timer_callback(void* arg)
{
    int64_t time_since_boot = esp_timer_get_time();
    ESP_LOGI(TAG, "Periodic timer called, time since boot: %lld us", time_since_boot);
}

static void oneshot_timer_callback(void* arg)
{
    int64_t time_since_boot = esp_timer_get_time();
    ESP_LOGI(TAG, "One-shot timer called, time since boot: %lld us", time_since_boot);
    esp_timer_handle_t periodic_timer_handle = (esp_timer_handle_t) arg;
    /* To start the timer which is running, need to stop it first */
    ESP_ERROR_CHECK(esp_timer_stop(periodic_timer_handle));
    ESP_ERROR_CHECK(esp_timer_start_periodic(periodic_timer_handle, 1000000));
    time_since_boot = esp_timer_get_time();
    ESP_LOGI(TAG, "Restarted periodic timer with 1s period, time since boot: %lld us",
            time_since_boot);
}
