/* ADC1 Example

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/
#include <stdio.h>
#include <stdlib.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/gpio.h"
#include "driver/adc.h"
#include "esp_adc_cal.h"

#define DEFAULT_VREF    1100        //Use adc2_vref_to_gpio() to obtain a better estimate
#define NO_OF_SAMPLES   1          //Multisampling

static esp_adc_cal_characteristics_t *adc_chars;
static const adc_channel_t channel6 = ADC_CHANNEL_6;     //GPIO34 if ADC1
static const adc_channel_t channel7 = ADC_CHANNEL_7;     //GPIO35 if ADC1
static const adc_bits_width_t width = ADC_WIDTH_BIT_12;
static const adc_atten_t atten = ADC_ATTEN_DB_0;
static const adc_unit_t unit = ADC_UNIT_1;


static void check_efuse(void)
{
    //Check if TP is burned into eFuse
    if (esp_adc_cal_check_efuse(ESP_ADC_CAL_VAL_EFUSE_TP) == ESP_OK) {
        printf("eFuse Two Point: Supported\n");
    } else {
        printf("eFuse Two Point: NOT supported\n");
    }
    //Check Vref is burned into eFuse
    if (esp_adc_cal_check_efuse(ESP_ADC_CAL_VAL_EFUSE_VREF) == ESP_OK) {
        printf("eFuse Vref: Supported\n");
    } else {
        printf("eFuse Vref: NOT supported\n");
    }
}


static void print_char_val_type(esp_adc_cal_value_t val_type)
{
    if (val_type == ESP_ADC_CAL_VAL_EFUSE_TP) {
        printf("Characterized using Two Point Value\n");
    } else if (val_type == ESP_ADC_CAL_VAL_EFUSE_VREF) {
        printf("Characterized using eFuse Vref\n");
    } else {
        printf("Characterized using Default Vref\n");
    }
}


void app_main(void)
{
	uint32_t adc_reading = 0;
	float vStretch = 0;
	float resistance = 0;
	float current = 0;
	float voltage = 0;
	uint32_t vBatt = 0;
    //Check if Two Point or Vref are burned into eFuse
    check_efuse();

    //Configure ADC
    adc1_config_width(width);
    adc1_config_channel_atten(channel6, atten);
    adc1_config_channel_atten(channel7, atten);

    //Characterize ADC
    adc_chars = calloc(1, sizeof(esp_adc_cal_characteristics_t));
    esp_adc_cal_value_t val_type = esp_adc_cal_characterize(unit, atten, width, DEFAULT_VREF, adc_chars);
    print_char_val_type(val_type);
    int counter = 0;
    //Continuously sample ADC1
    while (1) {
        adc_reading = 0;
        //Multisampling
        for (int i = 0; i < NO_OF_SAMPLES; i++) {
        	adc_reading += adc1_get_raw((adc1_channel_t)channel6);
        }
        adc_reading /= NO_OF_SAMPLES;
        //Convert adc_reading to voltage in mV
        vBatt = esp_adc_cal_raw_to_voltage(adc_reading, adc_chars);
        printf("Channel 6: Raw: %d\tBattery voltage: %dmV\n", adc_reading, vBatt);

        adc_reading = 0;
        //Multisampling
        for (int i = 0; i < NO_OF_SAMPLES; i++) {
        	adc_reading += adc1_get_raw((adc1_channel_t)channel7);
        }
        adc_reading /= NO_OF_SAMPLES;
        //Convert adc_reading to voltage in mV
        vStretch = esp_adc_cal_raw_to_voltage(adc_reading, adc_chars);
        current = vStretch/1000000;
        voltage = (3300-vStretch)/1000;
        resistance = voltage/current;
        printf("vStretch: %0.1f, current: %0.1f, voltage: %0.1f, resistance: %0.1f\n", vStretch, current, voltage, resistance);
        printf("Channel 7: Raw: %d\tStretch sensor resistance: %0.1fOhm\n", adc_reading, resistance);
        Counter++;
        printf("Counter = %d\n", Counter);
        vTaskDelay(pdMS_TO_TICKS(1));
    }
}
